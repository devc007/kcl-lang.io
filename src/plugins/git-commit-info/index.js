const { exec } = require('child_process');function getLastCommitHashAsync(filePath) {  return new Promise((resolve) => {    exec(`git log -n 1 --pretty=format:%h -- "${filePath}"`, { encoding: 'utf8' }, (err, stdout) => {      if (err) return resolve(null);      resolve(stdout.trim());    });  });}module.exports = function (context, options) {  return {    name: 'docusaurus-plugin-git-commit-info',    async contentLoaded({allContent, actions}) {      const {createData, setGlobalData} = actions;      const allDocsData = allContent['@docusaurus/plugin-content-docs'];      const allBlogData = allContent['@docusaurus/plugin-content-blog'];      const globalData = {};      if (allDocsData) {        for (const version of allDocsData.loadedVersions) {          for (const doc of version.docs) {            const commitHash = await getLastCommitHashAsync(doc.source);            if (commitHash) {              globalData[doc.id] = {lastUpdatedCommit: commitHash};              await createData(                `${doc.id}.json`,                JSON.stringify({lastUpdatedCommit: commitHash})              );            }          }        }      }      if (allBlogData) {        for (const post of allBlogData.blogPosts) {          const commitHash = await getLastCommitHashAsync(post.metadata.source);          if (commitHash) {            globalData[post.metadata.permalink] = {lastUpdatedCommit: commitHash};            await createData(              `${post.metadata.permalink.replace('/', '')}.json`,              JSON.stringify({lastUpdatedCommit: commitHash})            );          }        }      }      console.log('Setting global data:', globalData);      setGlobalData(globalData);    },  };};